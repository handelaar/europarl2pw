#!/usr/bin/env php
<?php

/**
 * europarl - Convert European Parliament plenary XML to PublicWhip XML
 *
 * WARNING: HIGHLY-EXPERIMENTAL ALPHA-AS-FUCK TEST CODE
 * WARNING: NOT FOR USE
 *
 * @version  0.0.2
 * @license  https://opensource.org/licenses/GPL-2.0 GPL 2
 * @author   John Handelaar <john@handelaar.org>
 */


// Test script; to be removed before release


//  Load source data first
$akomantoso = new ConvertEuroparlToPublicwhip('data/CRE-9-2022-11-24_EN.xml');
$akomantoso->setChamber('europarl');


//  Populate person_id to member_id lookup table with mysql
include_once('dbconnect.php');
mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);
$mysqli = new mysqli($dbhost, $dbuser, $dbpass, $dbname);
$speakers = array();
$query = "SELECT DISTINCT(person_id),member_id FROM member where left_house > '2022-11-24' and entered_house < '2022-11-24' ";
$people = $mysqli->query($query);

foreach ($people as $person) {
    $speakers[$person["person_id"]] = $person["member_id"];
}
$akomantoso->setSpeakers($speakers);


# do the thing
$akomantoso->toPublicWhip();
$akomantoso->write('data/europarl2022-11-24a.xml');



class ConvertEuroparlToPublicwhip
{

    public function __construct($filename)
    {

        # TODO: Make this actually do something later
        $this->debug = false;

        # Load example file
        # TODO: replace this with specified config options
        $this->europarl = simplexml_load_file($filename);

        # Filename assumed to contain date in format YYYYmmdd; this regex just removes non-numeric chars from filename
        # TODO: move this to config
        $this->date = DateTime::createFromFormat('Ymd H:i:s', preg_replace("/[^0-9]/", "", str_replace("CRE-9-", "", $filename)) . " 09:00:00");

        # TODO: move these to config
        $this->namespace = 'eu.openparl'; # use eg 'uk.org.publicwhip' if you're not in Ireland
        $this->revision = 'a';

        # Start item counter
        $this->counter = 0;

        # Used later to tag answers to questions
        $this->currentlang = "en";

        # Create bucket for PublicWhip XML output
        $this->output = array();

        #echo "\nEuroparl transcript file:\n" . $filename . "\n\n";
    }

    public function toPublicWhip()
    {

        // Loop through each CHAPTER section in source XML's simplexml object

        foreach ($this->europarl->xpath('//HTML/DEBATS/CHAPTER') as $section) {

            // Generate publicwhip <majorheading>
            $chapnum = intval(strval($section->attributes()->NUMBER));

            if ($chapnum > 0) {
                $this->counter++;
                $domnode = dom_import_simplexml($section);
                echo "Line " . str_pad($domnode->getLineNo(), 4, '0', STR_PAD_LEFT) . ": (" . $this->currentlang . ") (" . $this->date->format("H:i:s") . ")   ";
                echo $section->attributes()->NUMBER;
                echo ": ";

                // Find English chapter title, discard the rest

                $local = new SimpleXmlElement($section->asXml());
                $localxml = $local->xpath('//TL-CHAP[@VL="EN"]');
                # Chapter titles may contain links and those have gigantic spaces within them.
                # Flatten text and remove huge random empty strings
                $flattenme = dom_import_simplexml($localxml[0]);
                # remove this substr when not merely console testing
                echo substr(trim(str_replace("               ", "", $flattenme->nodeValue)), 0, 170) . "\n";

                // Make heading.  If chapter number has a decimal, drop heading to minor
                $headingtype = stristr($section->attributes()->NUMBER, ".") ? "minor" : "major";
                $this->output[] .= $this->heading($headingtype, $flattenme->nodeValue);

                unset($flattenme, $domnode, $local, $localxml, $headingtype);
            }

            foreach ($section->children() as $child) {

                switch ($child->getName()) {

                    case "TL-CHAP":
                        if (isset($child->attributes()->{'VOD-START'})) {
                            $this->date = DateTime::createFromFormat('Y-m-d\TH:i:s.v', (string) $child->attributes()->{'VOD-START'}, new DateTimeZone('Europe/Brussels'));
                        }
                        break;

                    case "NUMERO":
                        $this->counter++;
                        $this->numero($child);
                        break;

                    case "PRES":
                        $this->counter++;
                        $this->output[] .= $this->speechProcedural($child->asXML());
                        break;

                    case "PARA":
                        $this->counter++;
                        $this->output[] .= $this->speechProcedural($child->asXML());
                        break;

                    case "INTERVENTION":
                        $this->counter++;
                        $this->output[] .= $this->speech($child);
                        break;

                    default:
                        die("don't know what to do about <" . $child->getName() . "> at line " . $domnode->getLineNo() . "... exiting.\n");
                        break;

                }
                unset($domnode);

            }
        }
    }

    private function numero($object)
    {

        # Set current language if new one
        if (isset($object->attributes()->VL)) {

            $this->currentlang = strtolower($object->attributes()->VL);

        }

        # Update global timestamp
        if (isset($object->attributes()->{'VOD-START'})) {

            $this->date = DateTime::createFromFormat('Y-m-d\TH:i:s.v', (string) $object->attributes()->{'VOD-START'}, new DateTimeZone('Europe/Brussels'));

        }

        $this->consolewrite($object);

        return;

    }

    private function cleanup($string)
    {
        /*
            Replaces an array of non-HTML tags with their conventional
            equivalents, or removes them if they are unnecessary, then
            performs some other tidying of source items we don't want in
            our output.
        */

        $in = array(
            "<PRES>",
            "</PRES>",
            "<BRK></BRK>",
            "<BRK/>",
            '<EMPHAS NAME="B">',
            '<EMPHAS NAME="i">',
            '<EMPHAS NAME="I">',
            '</EMPHAS>',
            '<PARA>',
            '</PARA>',
            '<PARA/>',
            '\n',
            '\r',
        );

        $out = array(
            "<p lang='" . $this->currentlang . "'>",
            "</p>",
            "<br />",
            "<br />",
            "<em>",
            "<em>",
            "<em>",
            "</em>",
            "<p lang='" . $this->currentlang . "'>",
            "</p>",
            '',
            '',
            '',
        );

        $string = str_replace($in, $out, $string);
        $string = preg_replace('/\s+/', ' ', $string); # remove weird 15+ repeated space characters

        return trim($string);

    }

    private function consolewrite($object)
    {
        $domnode = dom_import_simplexml($object);
        echo "Line " . str_pad($domnode->getLineNo(), 4, '0', STR_PAD_LEFT) . ": (" . $this->currentlang . ") (" . $this->date->format("H:i:s") . ")   ";
        echo "          ";
        echo strtolower($object->getname());
        echo "\n";

        return;
    }

    private function speechProcedural($string)
    {

        $speech = '        <speech lang="' . $this->currentlang .
        '" id="' . $this->namespace . '/' . $this->chamber . '/' . $this->date->format('Y-m-d') . $this->revision . '.' .
        $this->counter . '" ' . 'nospeaker="true" ';

        # Don't add timestamp if we haven't yet encountered an object with a timestamp
        if ($this->date->format('H:i:s') !== "00:00:00") {
            $speech .= 'time="' . $this->date->format('H:i:s') . '" ';
        }

        $speech .= 'url="' . '">' . $this->cleanup(trim($string)) . "</speech>";
        return $speech;

    }

    private function speech($object)
    {

        /*

        <INTERVENTION>
        <ORATEUR PP="NULL" LG="DE" MEPID="96998" CODICT="96998" LIB="Evelyn | Regner">
        <LG>DE</LG>
        <EMPHAS NAME="B">Die Präsidentin. – </EMPHAS>
        </ORATEUR>
        <PARA>Als nächster Punkt der Tagesordnung folgt die Aussprache über den Bericht von Martina Dlabajová im Namen des Ausschusses für Industrie, Forschung und Energie über den Vorschlag für einen Beschluss des Europäischen Parlaments und des Rates über das Politikprogramm für 2030 „Weg in die digitale Dekade“ (<a href="#reds:iEcCom/COM-2021-0574" data-rel="reds" redmap-uri="/reds:iEcCom/COM-2021-0574">COM(2021)0574</a> – C9-0359/2021 – <a href="#reds:DirContProc/COD-2021-0293" data-rel="reds" redmap-uri="/reds:DirContProc/COD-2021-0293">2021/0293(COD)</a>) (                    <a href="#reds:iPlRp/A-9-2022-0159" data-rel="reds" redmap-uri="/reds:iPlRp/A-9-2022-0159">A9-0159/2022</a>).
        </PARA>
        </INTERVENTION>

         */
        $speechcontent = "";

        foreach ($object->children() as $child) {

            switch ($child->getName()) {

                case "ORATEUR":
                    $speakerid = $child->attributes()->CODICT;
                    $speakername = str_replace(" | ", " ", $child->attributes()->LIB);
                    $this->currentlang = strtolower($child->attributes()->LG);
                    break;

                case "PARA":
                    $speechcontent .= $this->cleanup(strval(trim($child->asXML())));
                    break;

                default:
                    // If we get here this function is missing a case
                    die("function speech() doesn't know anything about " . $child->getName() . "\n");
            }

        }

        $speech = '        <speech lang="' . $this->currentlang .
                    '" id="' . $this->namespace . '/' . $this->chamber . '/' . $this->date->format('Y-m-d') . $this->revision . '.' .
                    $this->counter . '" '  . 'speakername="' . trim($speakername) . '" ';


        // Mark speakers as 'unknown' if they are not in the current MEPid-to-memberID lookup table
        // This prevents eg Commissioners from being marked as if they were MEPs when speaking

        if(isset($this->speakers["$speakerid"])) {
            $speech .=  'speakerid="eu.europarl/member/' . $this->speakers["$speakerid"] . '" ';
        } else {
            $speech .=  'speakerid="unknown" ';
        }
        

        # Don't add timestamp if we haven't yet encountered an object with a timestamp
        if ($this->date->format('H:i:s') !== "00:00:00") {
            $speech .= 'time="' . $this->date->format('H:i:s') . '" ';
        }
        $speech .= 'url="' . '">';

        $speech .= $speechcontent;

        $speech .= "</speech>";

        return $speech;
    }

    private function heading($type, $object)
    {

        $date = date_format($this->date, 'Y-m-d');
        $time = date_format($this->date, 'H:i:s');

        $output = "    <$type-heading " .
            'id="' . $this->namespace . '/' . $this->chamber . '/' . $date . $this->revision . '.' . $this->counter . '" ' .
            'nospeaker="true" lang="en" ' .
            'time="' . $time . '" ' .
            'url="' . '">' .
            $this->cleanup(trim($object)) .
            "</$type-heading>";
        #echo $output ."\n";
        return ($output);

    }

    public function setChamber(string $chamber)
    {
        $this->chamber = $chamber;
        return;
    }

    public function setSpeakers(array $speakers)
    {
        $this->speakers = $speakers;
        return;
    }

    public function write($filename)
    {

        // Get boilerplate for publicwhip xml, append collected data, spit it all out to a file

        $xmloutput = file_get_contents('includes/publicwhipxmlprelude.txt');
        $xmloutput .= "\n" . '<publicwhip scrapeversion="' . $this->revision . '" latest="yes">' . "\n";
        $xmloutput .= implode("\n", $this->output);
        $xmloutput .= "\n</publicwhip>";
        file_put_contents($filename, $xmloutput);

        return;
    }

}
